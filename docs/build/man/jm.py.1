.TH "JM.PY" "1" "September 28, 2011" "0.1" "Job Manager"
.SH NAME
jm.py \- job manager command-line interface
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.\" Man page generated from reStructeredText.
.
.SH SYNOPSIS
.sp
.nf
.ft C
jm.py add [\-c | \-\-cache] [\-s | \-\-server] <job_description>

jm.py modify [\-c | \-\-cache] [\-s | \-\-server] [\-i | \-\-index] [\-p | \-\-pattern] <job_description>

jm.py delete [\-c | \-\-cache] [\-s | \-\-server] [\-i | \-\-index] [\-p | \-\-pattern]

jm.py list [\-c | \-\-cache] [\-s | \-\-server] [\-p | \-\-pattern] [\-t | \-\-terse]

jm.py merge [\-c | \-\-cache] <[[user@]remote_host:]remote_cache> [remote_hostname]

jm.py update [\-c | \-\-cache]  

jm.py daemon [\-c | \-\-cache]  
.ft P
.fi
.SH DESCRIPTION
.sp
jm.py provides a command\-line interface to the job_manager python module, which
enables a collection of jobs (principally long\-running high\-performance
computing calculations) to be easily monitored and managed.
.sp
Jobs can be added, modified, deleted and subsets of the jobs can be viewed.
Jobs are categorised according to the computer on which they are run.  The
local computer on which jm.py is run is treated specially and is called
\fIlocalhost\fP.
.sp
Data is saved to a cache file between runs and different cache files can be
merged together, including caches on remote servers directly over ssh.
.SH COMMANDS
.INDENT 0.0
.TP
.B add
.
Add a job running on the specified server with job details given by job
description.
.TP
.B modify
.
Modify the selected job(s) according to the job description fields
supplied.  Note that if neither a pattern nor an index is provided then no
job is selected to be modified.
.TP
.B delete
.
Delete the specified jobs.  Note that if neither a pattern nor an index is
provided then no job is selected to be modified.
.TP
.B list
.
List jobs which match the supplied search criteria.  The complete list of
jobs is printed out if no options are specified.  Only fields of the job
description which are not null are printed out.
.TP
.B merge
.
Merge jobs from the remote_cache file into the current cache.
.TP
.B update
.
Check all jobs on the \fIlocalhost\fP server and update the status of queueing
or running jobs if they have started running or finished.  The job status
is checked by searching for the \fIjob_id\fP using ps, qstat (for PBS\-based
queueing systems) and llq (for LoadLeveler queueing systems).
.TP
.B daemon
.
Run the update command once a minute.  Designed to be run in the background
as a daemon\-type process.
.UNINDENT
.SH JOB DESCRIPTION
.sp
The job_description consists of a list of key\-value pairs.  A new pair is
started by a new key, so each value can contain spaces.  The keys must
terminate with a colon (\(aq:\(aq) and have a space between the end of the key and
the first word in the value.  See \fI\%below\fP for examples.
.sp
Available elements of the job description are:
.INDENT 0.0
.TP
.B job_id
.
ID of the job.  This ought to be unique and in order to work with the
update and daemon commands should identiy the job by either being the pid
of the job (for jobs running interactively) or the ID of the job in the
queueing system.  This value is most conveniently obtained from the
environment or a queueing system environment variable.
.TP
.B path
.
Path to the directory in which the job is running.
.TP
.B program
.
Name of the program being executed.
.TP
.B input_fname
.
Filename of the input file.
.TP
.B output_fname
.
Filename of the output file.
.TP
.B status
.
status of job.  Available values are: unknown, held, queueing, running,
finished and analysed.  Default: unknown.
.TP
.B submit
.
File name of the submit script used.  Only relevant for jobs run on
clusters with queueing systems.
.TP
.B comment
.
Comment and notes on the job.
.UNINDENT
.sp
Unless specified above, all elements default to being a null value.
.sp
A job must have a \fIjob_id\fP, \fIpath\fP and \fIprogram\fP specified.  Other attributes are optional.  Only the attributes to be set or modified need to specified with the add and modify commands.
.SH OPTIONS
.INDENT 0.0
.TP
.B \-c,  \-\-cache
.
Specify the location of the cache file containing data from previous runs.
The default is $HOME/.cache/jm/jm.cache.  The directory structure for the
cache file will be created if necessary.
.TP
.B \-s,  \-\-server
.
Specify the server of the job.  The default is the \fIlocalhost\fP server
except for the \fBlist\fP command, where the default is all servers.  Can be
specified multiple times, in which case the command is applied to each
server in turn.  However, this rarely makes sense for the \fBadd\fP command.
.TP
.B \-i,  \-\-index
.
Select a job by its index on the specified server(s).  Can be specified
multiple times in order to select multiple jobs.
.TP
.B \-p,  \-\-pattern
.
Select a job by a given regular expression on the specified server(s).  The
regular expression is tested against all fields in the job description for
each job and a job is selected if any of the fields match the regular
expression.
.TP
.B \-t,  \-\-terse
.
Print only the hostname, index, job id and status of each job.
.UNINDENT
.SH EXAMPLES
.sp
Create a job from inside a script.  $$ is the current process id in bash.
.sp
.nf
.ft C
$ jm.py add job_id: $$ path: $PWD status: running 
.ft P
.fi
.sp
List all jobs.
.sp
.nf
.ft C
$ jm.py list
.ft P
.fi
.sp
Modify part of the job description.
.sp
.nf
.ft C
$ jm.py modify \-\-index 0 comment: a test calculation
.ft P
.fi
.sp
Automatically update the status of running jobs
.sp
.nf
.ft C
$ jm.py update
.ft P
.fi
.sp
Run a daemon process to automatically update the status of running jobs once
a minute using a non\-default cache file.
.sp
.nf
.ft C
$ jm.py daemon \-\-cache /path/to/cache
.ft P
.fi
.sp
Merge jobs from a remote server into the local job cache:
.sp
.nf
.ft C
$ jm.py merge user@remote_server_fqdn:/path/to/remote_cache remote_server
.ft P
.fi
.sp
List a subset of jobs.
.sp
.nf
.ft C
$ jm.py list \-\-server remote_server
$ jm.py list \-\-server localhost
.ft P
.fi
.sp
Delete a job on the remote server.
.sp
.nf
.ft C
$ jm.py delete \-\-server remote \-\-index 0
.ft P
.fi
.SH LICENSE
.sp
The jm.py script and the job_manager python module are distributed under the
Modified BSD License.  Please see the source files for more information.
.SH BUGS
.sp
Contact James Spencer (\fI\%james.s.spencer@gmail.com\fP) regarding bug reports,
suggestions for improvements or code contributions.
.SH AUTHOR
James Spencer
.SH COPYRIGHT
2011, James Spencer
.\" Generated by docutils manpage writer.
.\" 
.
