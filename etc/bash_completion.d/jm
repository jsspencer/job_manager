# bash completion for jm (job_manager command-line interface)

_jm() 
{

    local cur prev opts subcommand subcommands word job_desc REPLY JOBREPLY
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"

    subcommands_list=(add modify delete update daemon merge list)
    subcommands="add modify delete update daemon merge list"
    opts="--help --cache"
    job_desc="job_id: program: path: input_fname: output_fname: status: submit: comment:"

    subcommand=""
    for word in "${COMP_WORDS[@]}"; do
        for sc in "${subcommands_list[@]}"; do
            [[ "${sc}" == "${word}" ]] && subcommand=${sc}
        done
    done

    case "${subcommand}" in
        add)
            if [[ ${#COMP_WORDS[@]} -ge 3 ]]; then
                prev="${COMP_WORDS[COMP_CWORD-2]}${COMP_WORDS[COMP_CWORD-1]}"
            else
                prev="${COMP_WORDS[COMP_CWORD-1]}"
            fi
            if [[ "${prev}" == "status:" ]]; then
                COMPREPLY=($(compgen -W "unknown held queueing running finished analysed" -- ${cur}))
                return 0
            fi
            if [[ "${cur}" != -* && x"${cur}" != "x" ]]; then
                COMPREPLY=($(compgen -W "${job_desc}" -- ${cur}))
                return 0
            fi
            opts="${opts} --server ${job_desc}"
            ;;
        modify)
            if [[ ${#COMP_WORDS[@]} -ge 3 ]]; then
                prev="${COMP_WORDS[COMP_CWORD-2]}${COMP_WORDS[COMP_CWORD-1]}"
            else
                prev="${COMP_WORDS[COMP_CWORD-1]}"
            fi
            if [[ "${prev}" == "status:" ]]; then
                COMPREPLY=($(compgen -W "unknown held queueing running finished analysed" -- ${cur}))
                return 0
            fi
            if [[ "${cur}" != -* && x"${cur}" != "x" ]]; then
                COMPREPLY=($(compgen -W "${job_desc}" -- ${cur}))
                return 0
            fi
            opts="${opts} --server --pattern --index ${job_desc}"
            ;;
        delete)
            opts="${opts} --server --pattern --index"
            ;;
        update)
            ;;
        daemon)
            ;;
        merge)
            ;;
        list)
            opts="${opts} --server --pattern --terse"
            ;;
        *)
            opts="${subcommands} ${opts}"
            ;;
    esac

    COMPREPLY=($(compgen -W "${opts}" -- ${cur}))  
    return 0

}

complete -F _jm jm.py
compopt -o bashdefault -o default +o dirnames +o filenames +o nospace +o plusdirs jm.py
